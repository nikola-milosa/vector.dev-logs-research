[sources.logs]
type = "file"
include = [ "/logs/**/*.log" ]
read_from = "beginning"

[transforms.to_json]
type = "remap"
inputs = [ "logs" ]
source = """
. = parse_json!(.message)
parsed_message = parse_json(.MESSAGE) ?? .MESSAGE
if is_string(parsed_message){
    .MESSAGE = parsed_message
    .LEVEL = "INFO"
} else {
    .MESSAGE = parsed_message.log_entry.message
    .LEVEL = parsed_message.log_entry.level
    .CRATE_ = parsed_message.log_entry.crate_
    .MODULE = parsed_message.log_entry.module
    .LINE = parsed_message.log_entry.line
}
"""

# Debug purposes
# [sinks.out]
# type = "console"
# inputs = ["to_json"]
# target = "stdout"
#     [sinks.out.encoding]
#     codec = "text"

[sinks.out_logs]
type = "loki"
inputs = ["to_json"]
endpoint = "http://loki:3100"
compression = "none"
    [sinks.out_logs.labels]
    ic_node = "{{ node_id }}"
    ic_subnet = "{{ subnet_id }}"
    dc = "{{ dc_id }}"
    ic_operator = "{{ operator_id }}"
    [sinks.out_logs.encoding]
    codec = "json"
